14.1.2011
FS operace
class File - zjistuje informace o konkretni ceste
class ImmutableFile - zjisti informace pouze pri vytvoreni
Prochazeni adresarovou strukturou
- moznost rekurze
- filtrovani ktere polozky se pouziji
- moznost zkraceneho vyhodnocovani (pokud adresar nevyhovi filtru, uz se v nem
  ani dale nehleda)
- uplne prochazeni stromem
- omezeni urovne zanoreni
- casto pouzivane filtry
- ignorovani chyb behem prochazeni stromu nebo volani error handleru, ktery
  posoudi, zda lze chybu ignorovat ci nikoliv


13.1.2011
- Pojmenovani pro strict read(bytes), nacte plny pocet bajtu ze vstupu a nejenom
  cast jako normal read()
- Tovarni metody - umisteni a pojmenovani
  use case:

    input -> cache -> strict -> line
    output -> line
    
    input  cache -> strict -> decode -> line
    output -> encode -> line

  * dalsi modely?

- Pojmenovani pro tridy v modulu _buffer.py
- Jak a co testovat v mbl.io.*
- Jak testovat socket
- vytahnout testy parametru do jineho modulu
  _positiveNumberCheck(number)
  _stringCheck(data)

Navrhy na jmena trid
TcpLineSocket
DuplexLine
LineDuplex
LineWrapper


12.1.2011
Po duslednych uvahach jsem se rozhodl zmenit interface ke tride OutputStream.
Vyjmu metody ready() a writeNonblock(), nebot zatim neni zcela jasne, kde by
se tato funkcnost vyuzila. Pozitivni dopad je i na tridu DuplexStream, ktera
nyni pude bez problemu pouzit namisto InputStream i OutputStream. Jsem toho
nazoru, ze API je snadnejsi v budoucnu rozsirit nez z nej naopak metody 
ubirat, zvlast pokud na nich sou zavisle jine tridy. Takze zadni vratka
si v pripade potreby nechavam otevrena :) A hlavne YAGNI!
Pozn: Jediny pripad pouziti je v sekvencnim zpracovani kdy se nechceme
bloknout pri zapisu.


5.1.2011
Případy použítí proudů pro následný návrh vhodných obalových tříd a továren na
vytváření běžných proudů.

* Komunikace na socketu v obou směrech se zapnutým kešováním a možností
  pracovat po řádkách.
* Načítání bloků binárních dat
  Většinou načtu x bajtů nebo řádek, kde se dozvím velikost dalšího bloku pro
  načtení. Takhle stále dokola. Stejně tak zápis.
* Otevřu soubor a načítám z něj unicode text. Může být zpracováváno po řádkách.
  Stejně tak zápis.
* Pripad: (diskutabilni) ctu po radcich (http chunked output) a od urciteho
  stavu cteni ctu dvojradky (delka+data, delka+data, ..., nulova delka+konec
  dat) dc asj  
* Serializace/deserializace objektů do/z streamu.

Pro sjednocení inputStream a outputStream do jedné třídy navrhuji místo
IOStream použít jiný název. Zatím jsou v návrhu: Channel, DuplexChannel,
DuplexStream.
DualStream dostalo 4 hlasy od 4 hlasujících :)

Dále se hledá vhodný název pro třidu která kombinuje LineDuplexStream a
CachedDuplexStream. Ovšem né něco šíleného splácaného, ale pěkný, krátký a
výstižný název.

Je lepší název BufferOutputStream nebo StringOutputStream? (Podobně pak i
InputStream)


27.12.2010
Metodu InputStream.read(bytes) jsem zamerne zmenil tak, aby se vzdy musel
zadavat pocet bajtu, ktere je treba nacist. Duvod je ten, aby nedochazelo
k zamene s chovanim metody read() na nekterych python objektech, kde se 
naopak metoda bez parametru snazi nacist vsechna data.

23.12.2010 vecer
Po dukladnem zvazeni cele situace jsem API jeste pooupravil. Trida InputStream
prijde o metody isReady() a availableBytes(). Dlouho jsem nad metodou, ktera
rekne pocet dostupnych byte bez zablokovani uvazoval, ale prece jen ji nakonec
do API nedam. Je totiz dost proudu, kde tuto informaci nedokazu zjistit. Naopak
toto chovani lze pomerne snadno doimplementovat ve vyssi vrtsve. Proste se
nactou za pomoci neblokujicich read() nejaka data a ta se ulozi do bufferu.
Metoda wait(timeout) se zmeni na ready(timeout = Timeout.NONBLOCK), zde je jista
podobnost s Javou. Kdyz se metoda pouzije bez parametru, vraci stejne jako
v Jave, zda lze uskutecnit neblokujici volani read(). Pokud je parametr nastaven
je metoda zablokovana natrvalo nebo s moznosti timeoutu.
Zatim posledni spornou veci je, tedy aspon pro me, pritomnost metod setTimeout()
a getTimeout(). Do draftu jsem je tedy zahrnul. Nakonec kam jinam nastavit toto
chovani. Leda do tridy, ktera stream vytvari. Zde skutecne nemam jasno.
Navrhovane API je tedy nasledujici:

InputStream
	ready(timeout = Timeout.NONBLOCK): bool
	read(bytes): str
	skip(bytes): int
	close(): None

OutputStream
	ready(timeout = Timeout.NONBLOCK): bool
	flush(): None
	write(data): None	
	writeNonblock(data): int
	close(): None


23.12.2010 rano
Navrh jak vyresit read/write opearce, tedy jejich chovani pro streamy. I zde
je potreba dodrzovat pravidlo nejmensiho prekvapeni, coz znamena, ze se metody
chovaji tak jak uzivatel/programator ocekava. Z tohoto duvodu nebudou zakladni
metody nijak pretizene a dodatecne chovani bude dostupne pres dalsi metody.

InputStream.read(bytes): str
Metoda je blokujici, pokud nejsou k dispozici data. Pokud jsou, vrati nejaka
do maximalni velikosti <bytes>. Pokud je pro stream nastaven timeout, muze
byt vyhozena vyjimka TimeoutError, pokud aspon nejaka data nejsou k dispozici
do casoveho limitu. Kdyz byl dosahnut konec streamu, vraci metoda prazdny
retezec ''.

InputStream.wait(timeout): bool
Vrati True po nejkratsi mozne dobe, pokud jsou k dispozici nejaka data.
V pripade ze timout vyprsi, vraci False.
Zvazit, zda nezrusit metodu isReady() protoze tato metoda dela to stejne, vcetne
timeoutu.

OutputStream.write(data): None
Metoda je blokujici, dokud nezapise vsechna data. Muze vyhodit vyjimku
TimeoutError. Nevraci nic.

OutputStream.wait(timeout): bool
Uplne stejne chovani jako v InputStream. Tady to znamena, ze bez blokovani pujde
zapsat aspon jeden byte pri volani

OutputStream.write writeImmediately(data): int
Pokusi se zapsat aspon nejaka data tak, aby volani nebylo blokujici. Vraci pocet
uspesne zapsanych bajtu. Vysledek muze byt i 0.
Pozn: chtelo by to jine jmeno metody.


21.12.2010
Finální návrh streamů lze shrnout do těchto bodů (nejsou řazeny podle
důležitosti)

1) Bude se striktně rozličovat byte stream a unicode stream.
2) Byte stream by měli implementovat všechny objekty, které chtějí umět
   komunikovat za pomoci streamu.
3) Byte stream je zatím nejčastěji používaný stream.
4) OutputStream kontroluje zda mu do metody write() přichází jen a puze datový
   typ str, jinak vyhazuje vyjímku.
5) InputStream implementuje metodu isReady() i availableBytes(), jak si ji
   stream zařídí je jeho věc. Počet bajtů nemusí znát přesně, pak vrátí prostě
   jen 1.
6) Existuje sada konvertorů z byte na unicode stream a zpět - za pomoci
   kódovacích tabulek (národní kódování, UTF8 a spol).
7) LineReader a LineWriter existuje i v mutaci pro byte stream.
8) Všechny vyjímky jsou sjednoceny pod IOError.
9) Eexistují tovární metody, které automatizuji často používané konstrukce
   i s jejich filtry.
10) Existuje třída IOStream, která sdružuje InputStream i OutputStream, aby se
    zjednodušilo časté předávání obou těchto objektů.
    Měla by tato třída mít implementovány nejaké další metody? Asi ne.



InputsStream/OutputStream je základ pro všechna základní komunikační média
Pokud na ně navazuji Reader/Writer je třeba řešit otázku kódovaní
- možnost kdy používám 8bit je to šumák
- když se používá nějaké 8bit lokální kódování, je to taky easy
 (jaký háže Java vyjímky když tam rvu špatný znaky)
- ovšem největší průser vidim v načítání UTF-8 textu, dopředu nelze určit délku
  textu a musim to zpracovávat bajt po bajtu

Jak Java řeší načítání za pomoci UTF-8?
Neřeší to nijak :) Když se jí vstupní znak nezdá, prostě ho nahradí znakem
U+FFFD - replacement character used to replace an unknown or unprintable character

Vzhledem k tomu že jsme v Pythonu, kde věci nemusíme dělat tak složitě jako
v Javě, změnil bych tu trošku model proudů. Asi je zbytečné, striktně
oddělovat bytové a znakové. Pokud třídy pro práci s nimi budou navrženy
dostatečně transparetně, nemělo by ani vadit, který typ se zrovna zpracovávát.
Lze pak jednoduše použít základní InputStream na něj navěsit Buffer dále pak
CharsetDecoder a za něj teprve LineReader. Aby se v běžném používání nemuselo
toto všechno dělat růčo jako v Jave, je tu Jonášův návrh na zřízení
továren, které poskytnou metody pro nejčastěji používané operace. Tím se
usnadní používání knihovny, ale zároveň zůstane přístupný nízkoúrovňový přístup
na vytváření složitějších spojení proudů a další programování vlastních filtrů.

Je zde na zvážení využití metod available() a ready(). Každá má trošičku jiné
chování. available() říká, kolik bajtů půjde načíst ze vstupního proudu, aniž
by došlo k zablokování. ready() pak slouží jen k prostému oznámení, zda se
proud nezablokuje následujícím čtením. Problém je v tom, že určité typy proudů
nedokáží dopředu říct, kolik znaků půjde bez blokování načíst. Typicky třeba
UTF-8 stream. Bez konkrétní znalosti načtených dat nelze dopředu určit, kolik
takto vznikne unicode znaků. Zde tedy nevím, jaký zvolit správný model.

Na závěr se pak nabízí úvaha, zda třídy pro práci s proudy nenazvat jinak než
je tomu v Jave. Už z toho důvodu, že nepřebírám přesný Java model, ale nechal
jsem se jím jen inspirovat. Stejná jména a trošku jiné chování, by pak mohlo
být zavádějící.


starsi poznamky

pracuje s bajty:
LineInputStream
LineOutputStream
LineIOStream

pracuji s unicode:
LineReader
LineWriter
Line???


InputStream
	int   available()
	str   read(bytes)
	int   skip(bytes)
	None  close()

OutputStream
	None  write(data)
	None  flush()
	None  close()

Reader
	bool  ready()
	str   read(chars)
	int   skip(chars)
	None  close()

IOError
	TimeoutError
	EOFError

# NOTICE #
read() a skip() vzdy ceka na nejaky vstup, do te doby je blokujici, vratit
muze pocet mensi nez vyzadovany, ale vzdy aspon jeden byte ci znak. Pri konci
streamu - EOS vraci prazdny retezec. Pri chybe vyhazuje vyjimku IOError nebo jejiho
potomka.
Jakakoliv ze zakladnich metod muze vyhodit vyjiku IOError


Stream types
	file
	socket
	buffer (in memory)
	serial port


# QUESTIONS #
Mely by byt operace nad temito tridami synchronizovany? Nebo je lepsi udelat
dalsi obalove tridy, ktere toto budou resit?


# NOTICE "ASCII8"
cp437
http://ascii-table.com/ascii-extended-pc-list.php
http://ascii-table.com/ansi-codes.php


# poznamka k prevodu neznamych znaku do unicode v jave
http://en.wikipedia.org/wiki/Specials_(Unicode_block)
